Project 4:  registration system
Write a pseudocode and program to create a registration system where the user can create aa class by name like CIS 2131 Python Programming, and have a list of students registered
- allow the user to create as many classes as they want, include a maximum class size and don't allow more students than that to register.
- when a student registers for a class, add their name to the roster, if there is room
- add a method for printing a student's list of classes, need to look at all the class rosters?
- allow students to un-enroll from a class ( remove them from the roster ) ( don't forget to update the class file )
- two modes, administrator mode and student mode in administrator mode, allow creating, updating, deleting classes, and printing class rosters in student mode, allow enrolling, printing schedules and un-enrolling from classes.


To solve this problem, you can follow these steps:

Define Class Structure: Create a class structure to represent classes and students. This class should have attributes like class name, maximum size, and a list to store enrolled students.

Implement Administrator Mode:
Allow administrators to add, update, and delete classes.
Provide functionality to print class rosters.

Implement Student Mode:
Allow students to enroll in classes.
Enable students to view their enrolled classes and un-enroll from them if needed.

Ensure Data Integrity:
Implement checks to ensure that the maximum class size is not exceeded when enrolling students.

Data Storage:
Decide on a method for storing class information and student enrollments. This could be done using files (e.g., CSV or text files) or databases.

Testing:
Test the system thoroughly to ensure that all functionalities work as expected.
Include both positive and negative test cases to validate the system's behavior in different scenarios.

Error Handling:
Implement error handling to handle exceptions gracefully and provide meaningful error messages to users when something goes wrong.

Documentation:
Document your code thoroughly to make it easier for others to understand and maintain.
By following these steps, you can create a robust registration system that meets the requirements outlined in the problem statement. 
Remember to iterate and refine your solution based on feedback and real-world usage to improve its usability and reliability.

Here is sugistion output:
Do you want (a)dmin mode or (s)tudent mode? a
do you want to take more actions? y/n y
Do you want (a)dmin mode or (s)tudent mode?s
1 - enroll in a class
2 - un-enroll from a class
3 - print list of classes1
Please enter the class nameCIS 2131
Please enter your full nameAAA BBBB
do you want to take more actions? y/n n





def is_class_in_class_list_or_print_message(class_list, class_name):
    if class_name not in class_list:
        print("That class is not in the system")
        return False
    return True

def get_class_name():
    class_name = input("Please enter the class name")
    return class_name

class_list = {}

# class_list['CIS 2131'] = {}
# class_list['CIS 2131']['max_size'] = 27
# class_list['CIS 2131']['student_list'] = []
#
# class_list['CIS 2131']['student_list'].append("Jeb")
# class_list['CIS 2131']['student_list'].append("Journey")

class_file = open("class_file.txt")
class_data = class_file.readlines()
class_file.close()
for line in class_data:
    data = line.strip().split("|")
    class_list[data[0]] = {}
    class_list[data[0]]['max_size'] = int(data[1])
    class_list[data[0]]['student_list'] = []
    for index in range(2, len(data)):
        class_list[data[0]]['student_list'].append(data[index])

more_actions = 'y'

while more_actions == 'y':
    mode = input("Do you want (a)dmin mode or (s)tudent mode?").lower()

    if mode == 'a':
        admin_action = input("1 - add a class\n"
                             "2 - update a class\n"
                             "3 - delete a class\n"
                             "4 - print a class roster")

        if admin_action == "1":
            class_name = get_class_name()
            max_size = int(input("Please enter the max class size"))
            if class_name not in class_list:
                class_list[class_name] = {}
                class_list[class_name]['max_size'] = max_size
                class_list[class_name]['student_list'] = []
            else:
                print("That class is already in the system, please update")
        elif admin_action == "2":
            class_name = get_class_name()
            if is_class_in_class_list_or_print_message(class_list, class_name):
                print(f"The current max class size is {class_list[class_name]['max_size']}")
                max_size = int(input("Please enter the new max class size"))
                class_list[class_name]['max_size'] = max_size
        elif admin_action == "3":
            class_name = get_class_name()
            if is_class_in_class_list_or_print_message(class_list, class_name):
                class_list.pop(class_name)
        elif admin_action == "4":
            class_name = get_class_name()
            if is_class_in_class_list_or_print_message(class_list, class_name):
                print("List of students enrolled:")
                for student in class_list[class_name]['student_list']:
                    print(student)

    elif mode == "s":
        student_action = input("1 - enroll in a class\n"
                             "2 - un-enroll from a class\n"
                             "3 - print list of classes")

        if student_action == "1":
            class_name = get_class_name()
            if is_class_in_class_list_or_print_message(class_list, class_name):
                if len(class_list[class_name]['student_list']) < class_list[class_name]['max_size']:
                    student_name = input("Please enter your full name")
                    class_list[class_name]['student_list'].append(student_name)
                else:
                    print("I'm sorry, that class is full")
        elif student_action == "2":
            class_name = get_class_name()
            if is_class_in_class_list_or_print_message(class_list, class_name):
                student_name = input("Please enter your full name")
                if student_name in class_list[class_name]['student_list']:
                    class_list[class_name]['student_list'].remove(student_name)
                else:
                    print("You weren't enrolled in that class")
        elif student_action == "3":
            student_name = input("Please enter your full name")
            for class_name in class_list:
                if student_name in class_list[class_name]['student_list']:
                    print(class_name)

    more_actions = input("do you want to take more actions? y/n ").lower()

class_file = open("class_file.txt", 'w')

for class_name in class_list:
    class_file.write(class_name)
    class_file.write("|")
    class_file.write(str(class_list[class_name]['max_size']))
    for student in class_list[class_name]['student_list']:
       class_file.write("|")
       class_file.write(student)
    class_file.write("\n")

class_file.close()

